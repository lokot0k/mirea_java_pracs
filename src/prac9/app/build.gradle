/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'prac9.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task buildJar(type: Jar) {
    archiveBaseName = 'my-application'
    manifest {
        attributes('Main-Class': application.mainClass)
    }
    from sourceSets.main.output
}

task copyToDockerFolder(dependsOn: buildJar) {
    doLast {
        file("docker-folder").mkdirs()
        copy {
            from buildJar.archiveFile
            into 'docker-folder'
        }
        copy {
            from 'Dockerfile'
            into 'docker-folder'
        }
    }
}

task buildDockerImage(dependsOn: copyToDockerFolder) {
    doLast {
        exec {
            workingDir 'docker-folder'
            commandLine 'docker', 'build', '-t', 'my-application-image', '.'
        }
    }
}

task runDockerContainer(dependsOn: buildDockerImage) {
    doLast {
        exec {
            commandLine 'docker', 'run', 'my-application-image'
        }
    }
}